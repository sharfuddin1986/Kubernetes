
############################################      Assignment-5    ####################################

                                  1. Use the previous deployment
                                  2. Deploy an NGINX deployment of 3 replicas
                                  3. Create an NGINX service of type ClusterIP
                                  4. Create an ingress service/ Apache to Apache service/ NGINX to NGINX service
                          

######################    Follow the below command to execute the Assignment      ############################################
Step-1    
      nano nginx-deployment.yml


       apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx-container
          image: nginx:latest



        kubectl apply -f nginx-deployment.yml

Step-2
      nano nginx-service.yml


      apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP



      kubectl apply -f nginx-service.yml


  Step-3
        nano apache-deployment.yml



        apiVersion: apps/v1
kind: Deployment
metadata:
  name: apache-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: apache
  template:
    metadata:
      labels:
        app: apache
    spec:
      containers:
        - name: apache
          image: httpd:latest
          ports:
            - containerPort: 80


       kubectl apply -f apache-deployment.yml




  step-4
         nano apache-service.yml

         apiVersion: v1
kind: Service
metadata:
  name: apache-service
spec:
  selector:
    app: apache
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP


        kubectl apply -f apache-service.yml

    

  Step-5
        nano ingress-apache.yml


         apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: apache-ingress
spec:
  rules:
    - http:
        paths:
          - path: /apache
            pathType: Prefix
            backend:
              service:
                name: apache-service
                port:
                  number: 80

        kubectl apply -f ingress-apache.yml



  Step-5
        nano ingress-nginx.yml


      apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
spec:
  rules:
    - host: nginx.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port:
                  number: 80

         kubectl apply -f ingress-nginx.yaml

        


 

      
